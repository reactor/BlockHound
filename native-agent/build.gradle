plugins {
    id 'com.cisco.external-build' version '1.14'
}

model {
    platforms {
        osx {
            operatingSystem 'osx'
            architecture 'x86-64'
        }

        linux {
            operatingSystem 'linux'
            architecture 'x86-64'
        }

        windows {
            operatingSystem 'windows'
            architecture 'x86-64'
        }
    }

    components {
        BlockHound(com.cisco.gradle.externalbuild.ExternalNativeLibrarySpec) {
            targetPlatform "osx"
            targetPlatform "linux"
            targetPlatform "windows"

            buildConfig(com.cisco.gradle.externalbuild.tasks.CMake) {
                redirectOutput = false

                cmakeExecutable project.file("toolchain/cmake")
                executable project.file("toolchain/make")

                switch ((binary.targetPlatform.operatingSystem as OperatingSystem).name) {
                    case "osx":
                        cmakeArgs(
                                '-DCMAKE_SYSTEM_NAME=Darwin',
                                '-DCMAKE_CXX_FLAGS=-stdlib=libc++',
                        )
                        break;
                    case "windows":
                        cmakeArgs(
                                '-DCMAKE_SYSTEM_NAME=Windows'
                        )
                        break;
                }

                cmakeRoot '.'
                workingDir file("${buildDir}/external-build/${binary.component.name}/${binary.targetPlatform.name}")

                environment = [
                        'PROJECT_ROOT_DIR': rootProject.projectDir,
                        'CROSS_TRIPLE': binary.targetPlatform.name,
                ]

                inputs.dir 'toolchain'
                inputs.dir 'src'
                inputs.file 'CMakeLists.txt'
                outputs.dir workingDir
            }
        }
    }
}