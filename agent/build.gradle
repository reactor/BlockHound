plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "java"
    id "maven-publish"
    id "signing"
    id "org.unbroken-dome.test-sets" version "4.0.0"
}

description = "BlockHound Java Agent"
ext.detailedDescription = "Java agent to detect blocking calls from non-blocking threads."

testSets {
    jarFileTest
}

sourceCompatibility = targetCompatibility = 8

shadowJar {
    classifier = null

    manifest {
        attributes('Can-Retransform-Classes': 'true')
        attributes('Can-Set-Native-Method-Prefix': 'true')
        attributes('Can-Redefine-Classes': 'true')
        attributes('Automatic-Module-Name': 'reactor.blockhound')
        attributes('Premain-Class': 'reactor.blockhound.BlockHound')
    }

    exclude 'META-INF/versions/9/module-info.class'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/licenses/'
    exclude 'META-INF/maven/**'
    exclude 'reactor/shaded/META-INF/**'

    // TODO discuss with ByteBuddy folks how to shade it
    exclude 'win32-x86*/**'
}

project.tasks.build.dependsOn(shadowJar)

task relocateShadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "reactor.blockhound.shaded"
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

project.tasks.jarFileTest.configure {
    systemProperty("jarFile", shadowJar.outputs.files.singleFile)
    dependsOn(shadowJar)
}
tasks.check.dependsOn tasks.jarFileTest

dependencies {
    compileOnly 'com.google.auto.service:auto-service-annotations:1.0.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.0'

    implementation 'net.bytebuddy:byte-buddy:1.12.22'    
    implementation 'net.bytebuddy:byte-buddy-agent:1.12.22'

    compileOnly 'io.projectreactor:reactor-core:3.2.5.RELEASE'
    compileOnly 'io.reactivex.rxjava2:rxjava:2.2.18'

    jarFileTestImplementation 'org.assertj:assertj-core:3.24.2'
    jarFileTestImplementation 'junit:junit:4.13.2'
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

publishing {
    publications {
        mavenJava(MavenPublication) { publication ->
            artifacts.removeAll { it.classifier == null }
            artifact project.tasks.shadowJar
            artifact sourcesJar
            artifact javadocJar

            artifactId 'blockhound'
        }
    }
}
