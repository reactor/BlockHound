subprojects {
    apply from: "$rootDir/gradle/publishing.gradle"

    group = "io.projectreactor.tools"

    repositories {
        mavenCentral()
    }

    tasks.withType(Test).all {
        def javaMajorVersion = System.getProperty("java.version").split("\\.", 2)[0].toInteger()
        if (javaMajorVersion >= 13) {
            jvmArgs += [
                    "-XX:+AllowRedefinitionToAddDeleteMethods"
            ]
        }
    }


    plugins.withType(SigningPlugin) {
        //skipping if not .RELEASE. Note the task graph is still being evaluated here.
        //This works because the version is only defined by CI scripts, and only the release one should use .RELEASE suffix
        def shouldSign = version.toString().endsWith(".RELEASE")
        project.signing {
            required { shouldSign }

            //skip the configuration entirely if !shouldSign. the task shouldn't even be available
            if (shouldSign) {
                def signingKey = System.getenv('GRADLE_SIGNING_KEY')
                def signingPassword = System.getenv('GRADLE_SIGNING_PASSWORD')
                useInMemoryPgpKeys(signingKey, signingPassword)

                afterEvaluate {
                    sign publishing.publications.mavenJava
                }
            }
        }
    }

    plugins.withType(MavenPublishPlugin) {
        project.publishing {
            repositories {
                maven {
                    url System.getenv('GRADLE_PUBLISH_REPO_URL')
                    credentials {
                        username = System.getenv('GRADLE_PUBLISH_MAVEN_USER')
                        password = System.getenv('GRADLE_PUBLISH_MAVEN_PASSWORD')
                    }
                }
            }
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}
